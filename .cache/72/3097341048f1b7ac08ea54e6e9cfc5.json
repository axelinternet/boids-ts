{"id":"../node_modules/gl-vec2/limit.js","dependencies":[{"name":"/Users/accurat_alberto/Code/accurat/kf/boids/package.json","includedInParent":true,"mtime":1538915741000},{"name":"/Users/accurat_alberto/Code/accurat/kf/boids/node_modules/gl-vec2/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"module.exports = limit;\n\n/**\n * Limit the magnitude of this vector to the value used for the `max`\n * parameter.\n *\n * @param  {vec2} the vector to limit\n * @param  {Number} max the maximum magnitude for the vector\n * @returns {vec2} out\n */\nfunction limit(out, a, max) {\n  var mSq = a[0] * a[0] + a[1] * a[1];\n\n  if (mSq > max * max) {\n    var n = Math.sqrt(mSq);\n    out[0] = a[0] / n * max;\n    out[1] = a[1] / n * max;\n  } else {\n    out[0] = a[0];\n    out[1] = a[1];\n  }\n\n  return out;\n}\n","map":{"mappings":[{"source":"../node_modules/gl-vec2/limit.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/gl-vec2/limit.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}}],"sources":{"../node_modules/gl-vec2/limit.js":"module.exports = limit;\n\n/**\n * Limit the magnitude of this vector to the value used for the `max`\n * parameter.\n *\n * @param  {vec2} the vector to limit\n * @param  {Number} max the maximum magnitude for the vector\n * @returns {vec2} out\n */\nfunction limit(out, a, max) {\n  var mSq = a[0] * a[0] + a[1] * a[1];\n\n  if (mSq > max * max) {\n    var n = Math.sqrt(mSq);\n    out[0] = a[0] / n * max;\n    out[1] = a[1] / n * max;\n  } else {\n    out[0] = a[0];\n    out[1] = a[1];\n  }\n\n  return out;\n}\n"},"lineCount":25}},"hash":"9d64a1a39f582ddd8233c5b3277d2280","cacheData":{"env":{}}}