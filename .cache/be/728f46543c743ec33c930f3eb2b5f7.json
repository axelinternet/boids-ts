{"id":"../node_modules/gl-vec2/forEach.js","dependencies":[{"name":"/Users/accurat_alberto/Code/accurat/kf/boids/package.json","includedInParent":true,"mtime":1538915741000},{"name":"/Users/accurat_alberto/Code/accurat/kf/boids/node_modules/gl-vec2/package.json","includedInParent":true,"mtime":499162500000},{"name":"./create","loc":{"line":3,"column":18},"parent":"/Users/accurat_alberto/Code/accurat/kf/boids/node_modules/gl-vec2/forEach.js","resolved":"/Users/accurat_alberto/Code/accurat/kf/boids/node_modules/gl-vec2/create.js"}],"generated":{"js":"module.exports = forEach\n\nvar vec = require('./create')()\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nfunction forEach(a, stride, offset, count, fn, arg) {\n    var i, l\n    if(!stride) {\n        stride = 2\n    }\n\n    if(!offset) {\n        offset = 0\n    }\n    \n    if(count) {\n        l = Math.min((count * stride) + offset, a.length)\n    } else {\n        l = a.length\n    }\n\n    for(i = offset; i < l; i += stride) {\n        vec[0] = a[i]\n        vec[1] = a[i+1]\n        fn(vec, vec, arg)\n        a[i] = vec[0]\n        a[i+1] = vec[1]\n    }\n    \n    return a\n}","map":{"mappings":[{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/gl-vec2/forEach.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}}],"sources":{"../node_modules/gl-vec2/forEach.js":"module.exports = forEach\n\nvar vec = require('./create')()\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nfunction forEach(a, stride, offset, count, fn, arg) {\n    var i, l\n    if(!stride) {\n        stride = 2\n    }\n\n    if(!offset) {\n        offset = 0\n    }\n    \n    if(count) {\n        l = Math.min((count * stride) + offset, a.length)\n    } else {\n        l = a.length\n    }\n\n    for(i = offset; i < l; i += stride) {\n        vec[0] = a[i]\n        vec[1] = a[i+1]\n        fn(vec, vec, arg)\n        a[i] = vec[0]\n        a[i+1] = vec[1]\n    }\n    \n    return a\n}"},"lineCount":42}},"hash":"b70b3e6aa34136735a3e9d496852e758","cacheData":{"env":{}}}