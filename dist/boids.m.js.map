{"version":3,"file":"boids.m.js","sources":["../src/gl-vec2-utils.ts","../src/Boid.ts","../src/Flock.ts"],"sourcesContent":["import { vec2, normalize, scale } from 'gl-vec2'\n\nexport function map(value: number, istart: number, istop: number, ostart: number, ostop: number) {\n  return ostart + (ostop - ostart) * ((value - istart) / (istop - istart))\n}\n\nexport function setLen(out: vec2, a: vec2, x: number) {\n  normalize(out, a)\n  scale(out, out, x)\n  return out\n}\n\nexport function heading(a: vec2) {\n  return Math.atan2(a[1], a[0])\n}\n","import {\n  vec2,\n  create as createVector,\n  set,\n  add,\n  scale,\n  limit,\n  sub,\n  normalize,\n  sqrDist,\n  len,\n  lerp,\n} from 'gl-vec2'\nimport { setLen, map } from './gl-vec2-utils'\n\nexport type BoidOptions = {\n  center: vec2\n  canvasSize: vec2\n  velocity?: vec2\n  r?: number\n  maxspeed?: number\n  maxforce?: number\n  separationScale?: number\n  alignScale?: number\n  cohesionScale?: number\n  desiredSeparation?: number\n  neighborDistance?: number\n  arriveRadius?: number\n}\n\nexport class Boid {\n  acceleration: vec2\n  velocity: vec2\n  position: vec2\n  r: number\n  maxspeed: number\n  maxforce: number\n  width: number\n  height: number\n\n  separationScale: number\n  alignScale: number\n  cohesionScale: number\n  desiredSeparation: number\n  neighborDistance: number\n  arriveRadius: number\n\n  desiredSeek: vec2\n  steerSeek: vec2\n  separateDiff: vec2\n  steerSeparate: vec2\n\n  sumCohesion: vec2\n  sumAlign: vec2\n\n  oldVelocity: vec2\n\n  smoothVelocity: vec2\n\n  constructor(opts: BoidOptions) {\n    this.acceleration = set(createVector(), 0, 0)\n    this.velocity = set(createVector(), opts.velocity[0], opts.velocity[1])\n    this.oldVelocity = set(createVector(), opts.velocity[0], opts.velocity[1])\n    this.smoothVelocity = set(createVector(), opts.velocity[0], opts.velocity[1])\n    this.position = set(createVector(), opts.center[0], opts.center[1])\n    this.r = opts.r || 3\n    this.maxspeed = opts.maxspeed || 3 // Maximum speed\n    this.maxforce = opts.maxforce || 0.05 // Maximum steering force\n    this.width = opts.canvasSize[0]\n    this.height = opts.canvasSize[1]\n\n    this.separationScale = opts.separationScale || 1.5\n    this.alignScale = opts.alignScale || 1.0\n    this.cohesionScale = opts.cohesionScale || 1.0\n\n    this.desiredSeparation = (opts.desiredSeparation || 25) ** 2\n    this.neighborDistance = (opts.neighborDistance || 50) ** 2\n\n    this.arriveRadius = opts.arriveRadius || 100\n\n    this.desiredSeek = set(createVector(), 0, 0)\n    this.steerSeek = set(createVector(), 0, 0)\n    this.separateDiff = set(createVector(), 0, 0)\n\n    this.steerSeparate = set(createVector(), 0, 0)\n\n    this.sumCohesion = set(createVector(), 0, 0)\n    this.sumAlign = set(createVector(), 0, 0)\n  }\n\n  run(boids: ReadonlyArray<Boid>, target: vec2 = null) {\n    if (target) {\n      this.arrive(target)\n    } else {\n      this.flock(boids)\n    }\n\n    this.update()\n    this.borders()\n  }\n\n  arrive(target: vec2) {\n    const desired = sub(createVector(), target, this.position) // A vector pointing from the location to the target\n    const d = len(desired)\n    // Scale with arbitrary damping within arriveRadius pixels\n    if (d < this.arriveRadius) {\n      const m = map(d, 0, this.arriveRadius, 0, this.maxspeed)\n      setLen(desired, desired, m)\n    } else {\n      setLen(desired, desired, this.maxspeed)\n    }\n\n    // Steering = Desired minus Velocity\n    const steer = sub(desired, desired, this.velocity)\n    limit(steer, steer, this.maxforce) // Limit to maximum steering force\n\n    // We could add mass here if we want A = F / M\n    add(this.acceleration, this.acceleration, steer)\n  }\n\n  // We accumulate a new acceleration each time based on three rules\n  flock(boids: ReadonlyArray<Boid>) {\n    set(this.oldVelocity, this.smoothVelocity[0], this.smoothVelocity[1])\n\n    set(this.sumCohesion, 0, 0)\n    set(this.sumAlign, 0, 0)\n\n    const sep = this.separate(boids) // Separation\n    const ali = this.align(boids) // Alignment\n    const coh = this.cohesion(boids) // Cohesion\n    // Arbitrarily weight these forces\n    scale(sep, sep, this.separationScale)\n    scale(ali, ali, this.alignScale)\n    scale(coh, coh, this.cohesionScale)\n    // Add the force vectors to acceleration\n\n    // We could add mass here if we want A = F / M\n    add(this.acceleration, this.acceleration, sep)\n\n    // We could add mass here if we want A = F / M\n    add(this.acceleration, this.acceleration, ali)\n\n    // We could add mass here if we want A = F / M\n    add(this.acceleration, this.acceleration, coh)\n  }\n\n  // Method to update location\n  update() {\n    // Update velocity\n    add(this.velocity, this.velocity, this.acceleration)\n    // Limit speed\n    limit(this.velocity, this.velocity, this.maxspeed)\n    add(this.position, this.position, this.velocity)\n    // Reset accelertion to 0 each cycle\n    scale(this.acceleration, this.acceleration, 0)\n\n    lerp(this.smoothVelocity, this.oldVelocity, this.velocity, 0.1)\n  }\n\n  // A method that calculates and applies a steering force towards a target\n  // STEER = DESIRED MINUS VELOCITY\n  seek(target: vec2) {\n    sub(this.desiredSeek, target, this.position) // A vector pointing from the location to the target\n    // Normalize desired and scale to maximum speed\n    normalize(this.desiredSeek, this.desiredSeek)\n    scale(this.desiredSeek, this.desiredSeek, this.maxspeed)\n    // Steering = Desired minus Velocity\n    sub(this.steerSeek, this.desiredSeek, this.velocity)\n    limit(this.steerSeek, this.steerSeek, this.maxforce) // Limit to maximum steering force\n    return this.steerSeek\n  }\n\n  // Wraparound\n  borders() {\n    if (this.position[0] < -this.r) this.position[0] = this.width + this.r\n    if (this.position[1] < -this.r) this.position[1] = this.height + this.r\n    if (this.position[0] > this.width + this.r) this.position[0] = -this.r\n    if (this.position[1] > this.height + this.r) this.position[1] = -this.r\n  }\n\n  // Separation\n  // Method checks for nearby boids and steers away\n  separate(boids: ReadonlyArray<Boid>) {\n    const desiredseparation = this.desiredSeparation\n    set(this.steerSeparate, 0, 0)\n    let count = 0\n    // For every boid in the system, check if it's too close\n    for (let i = 0; i < boids.length; i++) {\n      const d = sqrDist(this.position, boids[i].position)\n      // If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)\n      if (d > 0 && d < desiredseparation) {\n        // Calculate vector pointing away from neighbor\n        sub(this.separateDiff, this.position, boids[i].position)\n        normalize(this.separateDiff, this.separateDiff)\n        scale(this.separateDiff, this.separateDiff, 1 / d) // Weight by distance\n        add(this.steerSeparate, this.steerSeparate, this.separateDiff)\n        count++ // Keep track of how many\n      }\n    }\n    // Average -- divide by how many\n    if (count > 0) {\n      scale(this.steerSeparate, this.steerSeparate, 1 / count)\n    }\n\n    // As long as the vector is greater than 0\n    if (len(this.steerSeparate) > 0) {\n      // Implement Reynolds: Steering = Desired - Velocity\n      normalize(this.steerSeparate, this.steerSeparate)\n\n      scale(this.steerSeparate, this.steerSeparate, this.maxspeed)\n      sub(this.steerSeparate, this.steerSeparate, this.velocity)\n      limit(this.steerSeparate, this.steerSeparate, this.maxforce)\n    }\n    return this.steerSeparate\n  }\n\n  // Alignment\n  // For every nearby boid in the system, calculate the average velocity\n  align(boids: ReadonlyArray<Boid>) {\n    const neighborDistance = this.neighborDistance\n    const sum = set(this.sumAlign, 0, 0)\n    let count = 0\n    for (let i = 0; i < boids.length; i++) {\n      const d = sqrDist(this.position, boids[i].position)\n      if (d > 0 && d < neighborDistance) {\n        add(sum, sum, boids[i].velocity)\n        count++\n      }\n    }\n    if (count > 0) {\n      scale(sum, sum, 1 / count)\n      normalize(sum, sum)\n      scale(sum, sum, this.maxspeed)\n      const steer = sub(sum, sum, this.velocity)\n      limit(steer, steer, this.maxforce)\n      return steer\n    } else {\n      return set(createVector(), 0, 0)\n    }\n  }\n\n  // Cohesion\n  // For the average location (i.e. center) of all nearby boids, calculate steering vector towards that location\n  cohesion(boids: ReadonlyArray<Boid>) {\n    const neighborDistance = this.neighborDistance\n    const sum = set(this.sumCohesion, 0, 0) // Start with empty vector to accumulate all locations\n    let count = 0\n    for (let i = 0; i < boids.length; i++) {\n      const d = sqrDist(this.position, boids[i].position)\n      if (d > 0 && d < neighborDistance) {\n        add(sum, sum, boids[i].position) // Add location\n        count++\n      }\n    }\n    if (count > 0) {\n      scale(sum, sum, 1 / count)\n      return this.seek(sum) // Steer towards the location\n    } else {\n      return set(createVector(), 0, 0)\n    }\n  }\n}\n","import { Boid } from './Boid'\nimport { vec2 } from 'gl-vec2'\n\nexport class Flock {\n  boids: Array<Boid>\n\n  constructor() {\n    this.boids = [] // Initialize the array\n  }\n\n  run(target: vec2 = null) {\n    for (let boid of this.boids) {\n      boid.run(this.boids, target) // Passing the entire list of boids to each boid individually\n    }\n  }\n\n  addBoid(b: Boid) {\n    this.boids.push(b)\n  }\n}\n"],"names":["out","a","x","normalize","scale","Math","atan2","opts","this","acceleration","set","createVector","velocity","oldVelocity","smoothVelocity","position","center","r","maxspeed","maxforce","width","canvasSize","height","separationScale","alignScale","cohesionScale","desiredSeparation","neighborDistance","arriveRadius","desiredSeek","steerSeek","separateDiff","steerSeparate","sumCohesion","sumAlign","Boid","boids","target","arrive","flock","update","borders","istart","ostart","desired","sub","d","len","setLen","steer","limit","add","sep","separate","ali","align","coh","cohesion","lerp","desiredseparation","count","i","length","sqrDist","sum","seek","Flock","_a","_i","run","b","push"],"mappings":"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"}