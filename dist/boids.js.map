{"version":3,"file":"boids.js","sources":["../src/gl-vec2-utils.ts","../src/Boid.ts","../src/Flock.ts"],"sourcesContent":["import { vec2, normalize, scale } from 'gl-vec2'\n\nexport function map(value: number, istart: number, istop: number, ostart: number, ostop: number) {\n  return ostart + (ostop - ostart) * ((value - istart) / (istop - istart))\n}\n\nexport function setLen(out: vec2, a: vec2, x: number) {\n  normalize(out, a)\n  scale(out, out, x)\n  return out\n}\n\nexport function heading(a: vec2) {\n  return Math.atan2(a[1], a[0])\n}\n","import {\n  vec2,\n  create as createVector,\n  set,\n  add,\n  scale,\n  limit,\n  sub,\n  normalize,\n  sqrDist,\n  len,\n  lerp,\n} from 'gl-vec2'\nimport { setLen, map } from './gl-vec2-utils'\n\nexport type BoidOptions = {\n  center: vec2\n  canvasSize: vec2\n  velocity?: vec2\n  r?: number\n  maxspeed?: number\n  maxforce?: number\n  separationScale?: number\n  alignScale?: number\n  cohesionScale?: number\n  desiredSeparation?: number\n  neighborDistance?: number\n  arriveRadius?: number\n}\n\nexport class Boid {\n  acceleration: vec2\n  velocity: vec2\n  position: vec2\n  r: number\n  maxspeed: number\n  maxforce: number\n  width: number\n  height: number\n\n  separationScale: number\n  alignScale: number\n  cohesionScale: number\n  desiredSeparation: number\n  neighborDistance: number\n  arriveRadius: number\n\n  desiredSeek: vec2\n  steerSeek: vec2\n  separateDiff: vec2\n  steerSeparate: vec2\n\n  sumCohesion: vec2\n  sumAlign: vec2\n\n  oldVelocity: vec2\n\n  smoothVelocity: vec2\n\n  constructor(opts: BoidOptions) {\n    this.acceleration = set(createVector(), 0, 0)\n    this.velocity = set(createVector(), opts.velocity[0], opts.velocity[1])\n    this.oldVelocity = set(createVector(), opts.velocity[0], opts.velocity[1])\n    this.smoothVelocity = set(createVector(), opts.velocity[0], opts.velocity[1])\n    this.position = set(createVector(), opts.center[0], opts.center[1])\n    this.r = opts.r || 3\n    this.maxspeed = opts.maxspeed || 3 // Maximum speed\n    this.maxforce = opts.maxforce || 0.05 // Maximum steering force\n    this.width = opts.canvasSize[0]\n    this.height = opts.canvasSize[1]\n\n    this.separationScale = opts.separationScale || 1.5\n    this.alignScale = opts.alignScale || 1.0\n    this.cohesionScale = opts.cohesionScale || 1.0\n\n    this.desiredSeparation = (opts.desiredSeparation || 25) ** 2\n    this.neighborDistance = (opts.neighborDistance || 50) ** 2\n\n    this.arriveRadius = opts.arriveRadius || 100\n\n    this.desiredSeek = set(createVector(), 0, 0)\n    this.steerSeek = set(createVector(), 0, 0)\n    this.separateDiff = set(createVector(), 0, 0)\n\n    this.steerSeparate = set(createVector(), 0, 0)\n\n    this.sumCohesion = set(createVector(), 0, 0)\n    this.sumAlign = set(createVector(), 0, 0)\n  }\n\n  run(boids: ReadonlyArray<Boid>, target: vec2 = null) {\n    if (target) {\n      this.arrive(target)\n    } else {\n      this.flock(boids)\n    }\n\n    this.update()\n    this.borders()\n  }\n\n  arrive(target: vec2) {\n    const desired = sub(createVector(), target, this.position) // A vector pointing from the location to the target\n    const d = len(desired)\n    // Scale with arbitrary damping within arriveRadius pixels\n    if (d < this.arriveRadius) {\n      const m = map(d, 0, this.arriveRadius, 0, this.maxspeed)\n      setLen(desired, desired, m)\n    } else {\n      setLen(desired, desired, this.maxspeed)\n    }\n\n    // Steering = Desired minus Velocity\n    const steer = sub(desired, desired, this.velocity)\n    limit(steer, steer, this.maxforce) // Limit to maximum steering force\n\n    // We could add mass here if we want A = F / M\n    add(this.acceleration, this.acceleration, steer)\n  }\n\n  // We accumulate a new acceleration each time based on three rules\n  flock(boids: ReadonlyArray<Boid>) {\n    set(this.oldVelocity, this.smoothVelocity[0], this.smoothVelocity[1])\n\n    set(this.sumCohesion, 0, 0)\n    set(this.sumAlign, 0, 0)\n\n    const sep = this.separate(boids) // Separation\n    const ali = this.align(boids) // Alignment\n    const coh = this.cohesion(boids) // Cohesion\n    // Arbitrarily weight these forces\n    scale(sep, sep, this.separationScale)\n    scale(ali, ali, this.alignScale)\n    scale(coh, coh, this.cohesionScale)\n    // Add the force vectors to acceleration\n\n    // We could add mass here if we want A = F / M\n    add(this.acceleration, this.acceleration, sep)\n\n    // We could add mass here if we want A = F / M\n    add(this.acceleration, this.acceleration, ali)\n\n    // We could add mass here if we want A = F / M\n    add(this.acceleration, this.acceleration, coh)\n  }\n\n  // Method to update location\n  update() {\n    // Update velocity\n    add(this.velocity, this.velocity, this.acceleration)\n    // Limit speed\n    limit(this.velocity, this.velocity, this.maxspeed)\n    add(this.position, this.position, this.velocity)\n    // Reset accelertion to 0 each cycle\n    scale(this.acceleration, this.acceleration, 0)\n\n    lerp(this.smoothVelocity, this.oldVelocity, this.velocity, 0.1)\n  }\n\n  // A method that calculates and applies a steering force towards a target\n  // STEER = DESIRED MINUS VELOCITY\n  seek(target: vec2) {\n    sub(this.desiredSeek, target, this.position) // A vector pointing from the location to the target\n    // Normalize desired and scale to maximum speed\n    normalize(this.desiredSeek, this.desiredSeek)\n    scale(this.desiredSeek, this.desiredSeek, this.maxspeed)\n    // Steering = Desired minus Velocity\n    sub(this.steerSeek, this.desiredSeek, this.velocity)\n    limit(this.steerSeek, this.steerSeek, this.maxforce) // Limit to maximum steering force\n    return this.steerSeek\n  }\n\n  // Wraparound\n  borders() {\n    if (this.position[0] < -this.r) this.position[0] = this.width + this.r\n    if (this.position[1] < -this.r) this.position[1] = this.height + this.r\n    if (this.position[0] > this.width + this.r) this.position[0] = -this.r\n    if (this.position[1] > this.height + this.r) this.position[1] = -this.r\n  }\n\n  // Separation\n  // Method checks for nearby boids and steers away\n  separate(boids: ReadonlyArray<Boid>) {\n    const desiredseparation = this.desiredSeparation\n    set(this.steerSeparate, 0, 0)\n    let count = 0\n    // For every boid in the system, check if it's too close\n    for (let i = 0; i < boids.length; i++) {\n      const d = sqrDist(this.position, boids[i].position)\n      // If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)\n      if (d > 0 && d < desiredseparation) {\n        // Calculate vector pointing away from neighbor\n        sub(this.separateDiff, this.position, boids[i].position)\n        normalize(this.separateDiff, this.separateDiff)\n        scale(this.separateDiff, this.separateDiff, 1 / d) // Weight by distance\n        add(this.steerSeparate, this.steerSeparate, this.separateDiff)\n        count++ // Keep track of how many\n      }\n    }\n    // Average -- divide by how many\n    if (count > 0) {\n      scale(this.steerSeparate, this.steerSeparate, 1 / count)\n    }\n\n    // As long as the vector is greater than 0\n    if (len(this.steerSeparate) > 0) {\n      // Implement Reynolds: Steering = Desired - Velocity\n      normalize(this.steerSeparate, this.steerSeparate)\n\n      scale(this.steerSeparate, this.steerSeparate, this.maxspeed)\n      sub(this.steerSeparate, this.steerSeparate, this.velocity)\n      limit(this.steerSeparate, this.steerSeparate, this.maxforce)\n    }\n    return this.steerSeparate\n  }\n\n  // Alignment\n  // For every nearby boid in the system, calculate the average velocity\n  align(boids: ReadonlyArray<Boid>) {\n    const neighborDistance = this.neighborDistance\n    const sum = set(this.sumAlign, 0, 0)\n    let count = 0\n    for (let i = 0; i < boids.length; i++) {\n      const d = sqrDist(this.position, boids[i].position)\n      if (d > 0 && d < neighborDistance) {\n        add(sum, sum, boids[i].velocity)\n        count++\n      }\n    }\n    if (count > 0) {\n      scale(sum, sum, 1 / count)\n      normalize(sum, sum)\n      scale(sum, sum, this.maxspeed)\n      const steer = sub(sum, sum, this.velocity)\n      limit(steer, steer, this.maxforce)\n      return steer\n    } else {\n      return set(createVector(), 0, 0)\n    }\n  }\n\n  // Cohesion\n  // For the average location (i.e. center) of all nearby boids, calculate steering vector towards that location\n  cohesion(boids: ReadonlyArray<Boid>) {\n    const neighborDistance = this.neighborDistance\n    const sum = set(this.sumCohesion, 0, 0) // Start with empty vector to accumulate all locations\n    let count = 0\n    for (let i = 0; i < boids.length; i++) {\n      const d = sqrDist(this.position, boids[i].position)\n      if (d > 0 && d < neighborDistance) {\n        add(sum, sum, boids[i].position) // Add location\n        count++\n      }\n    }\n    if (count > 0) {\n      scale(sum, sum, 1 / count)\n      return this.seek(sum) // Steer towards the location\n    } else {\n      return set(createVector(), 0, 0)\n    }\n  }\n}\n","import { Boid } from './Boid'\nimport { vec2 } from 'gl-vec2'\n\nexport class Flock {\n  boids: Array<Boid>\n\n  constructor() {\n    this.boids = [] // Initialize the array\n  }\n\n  run(target: vec2 = null) {\n    for (let boid of this.boids) {\n      boid.run(this.boids, target) // Passing the entire list of boids to each boid individually\n    }\n  }\n\n  addBoid(b: Boid) {\n    this.boids.push(b)\n  }\n}\n"],"names":["out","a","x","normalize","scale","opts","this","acceleration","set","createVector","velocity","oldVelocity","smoothVelocity","position","center","r","maxspeed","maxforce","width","canvasSize","height","separationScale","alignScale","cohesionScale","desiredSeparation","Math","neighborDistance","arriveRadius","desiredSeek","steerSeek","separateDiff","steerSeparate","sumCohesion","sumAlign","Boid","boids","target","arrive","flock","update","borders","istart","ostart","desired","sub","d","len","setLen","steer","limit","add","sep","separate","ali","align","coh","cohesion","lerp","desiredseparation","count","i","length","sqrDist","sum","seek","Flock","_a","_i","run","b","push","atan2"],"mappings":"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"}